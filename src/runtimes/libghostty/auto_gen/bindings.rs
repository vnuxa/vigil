/* automatically generated by rust-bindgen 0.71.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const GHOSTTY_SUCCESS: u32 = 0;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type ghostty_app_t = *mut ::std::os::raw::c_void;
pub type ghostty_config_t = *mut ::std::os::raw::c_void;
pub type ghostty_surface_t = *mut ::std::os::raw::c_void;
pub type ghostty_inspector_t = *mut ::std::os::raw::c_void;
pub const ghostty_platform_e_GHOSTTY_PLATFORM_INVALID: ghostty_platform_e = 0;
pub const ghostty_platform_e_GHOSTTY_PLATFORM_MACOS: ghostty_platform_e = 1;
pub const ghostty_platform_e_GHOSTTY_PLATFORM_IOS: ghostty_platform_e = 2;
pub type ghostty_platform_e = ::std::os::raw::c_uint;
pub const ghostty_clipboard_e_GHOSTTY_CLIPBOARD_STANDARD: ghostty_clipboard_e = 0;
pub const ghostty_clipboard_e_GHOSTTY_CLIPBOARD_SELECTION: ghostty_clipboard_e = 1;
pub type ghostty_clipboard_e = ::std::os::raw::c_uint;
pub const ghostty_clipboard_request_e_GHOSTTY_CLIPBOARD_REQUEST_PASTE: ghostty_clipboard_request_e =
    0;
pub const ghostty_clipboard_request_e_GHOSTTY_CLIPBOARD_REQUEST_OSC_52_READ:
    ghostty_clipboard_request_e = 1;
pub const ghostty_clipboard_request_e_GHOSTTY_CLIPBOARD_REQUEST_OSC_52_WRITE:
    ghostty_clipboard_request_e = 2;
pub type ghostty_clipboard_request_e = ::std::os::raw::c_uint;
pub const ghostty_input_mouse_state_e_GHOSTTY_MOUSE_RELEASE: ghostty_input_mouse_state_e = 0;
pub const ghostty_input_mouse_state_e_GHOSTTY_MOUSE_PRESS: ghostty_input_mouse_state_e = 1;
pub type ghostty_input_mouse_state_e = ::std::os::raw::c_uint;
pub const ghostty_input_mouse_button_e_GHOSTTY_MOUSE_UNKNOWN: ghostty_input_mouse_button_e = 0;
pub const ghostty_input_mouse_button_e_GHOSTTY_MOUSE_LEFT: ghostty_input_mouse_button_e = 1;
pub const ghostty_input_mouse_button_e_GHOSTTY_MOUSE_RIGHT: ghostty_input_mouse_button_e = 2;
pub const ghostty_input_mouse_button_e_GHOSTTY_MOUSE_MIDDLE: ghostty_input_mouse_button_e = 3;
pub type ghostty_input_mouse_button_e = ::std::os::raw::c_uint;
pub const ghostty_input_mouse_momentum_e_GHOSTTY_MOUSE_MOMENTUM_NONE:
    ghostty_input_mouse_momentum_e = 0;
pub const ghostty_input_mouse_momentum_e_GHOSTTY_MOUSE_MOMENTUM_BEGAN:
    ghostty_input_mouse_momentum_e = 1;
pub const ghostty_input_mouse_momentum_e_GHOSTTY_MOUSE_MOMENTUM_STATIONARY:
    ghostty_input_mouse_momentum_e = 2;
pub const ghostty_input_mouse_momentum_e_GHOSTTY_MOUSE_MOMENTUM_CHANGED:
    ghostty_input_mouse_momentum_e = 3;
pub const ghostty_input_mouse_momentum_e_GHOSTTY_MOUSE_MOMENTUM_ENDED:
    ghostty_input_mouse_momentum_e = 4;
pub const ghostty_input_mouse_momentum_e_GHOSTTY_MOUSE_MOMENTUM_CANCELLED:
    ghostty_input_mouse_momentum_e = 5;
pub const ghostty_input_mouse_momentum_e_GHOSTTY_MOUSE_MOMENTUM_MAY_BEGIN:
    ghostty_input_mouse_momentum_e = 6;
pub type ghostty_input_mouse_momentum_e = ::std::os::raw::c_uint;
pub const ghostty_color_scheme_e_GHOSTTY_COLOR_SCHEME_LIGHT: ghostty_color_scheme_e = 0;
pub const ghostty_color_scheme_e_GHOSTTY_COLOR_SCHEME_DARK: ghostty_color_scheme_e = 1;
pub type ghostty_color_scheme_e = ::std::os::raw::c_uint;
pub type ghostty_input_scroll_mods_t = ::std::os::raw::c_int;
pub const ghostty_input_mods_e_GHOSTTY_MODS_NONE: ghostty_input_mods_e = 0;
pub const ghostty_input_mods_e_GHOSTTY_MODS_SHIFT: ghostty_input_mods_e = 1;
pub const ghostty_input_mods_e_GHOSTTY_MODS_CTRL: ghostty_input_mods_e = 2;
pub const ghostty_input_mods_e_GHOSTTY_MODS_ALT: ghostty_input_mods_e = 4;
pub const ghostty_input_mods_e_GHOSTTY_MODS_SUPER: ghostty_input_mods_e = 8;
pub const ghostty_input_mods_e_GHOSTTY_MODS_CAPS: ghostty_input_mods_e = 16;
pub const ghostty_input_mods_e_GHOSTTY_MODS_NUM: ghostty_input_mods_e = 32;
pub const ghostty_input_mods_e_GHOSTTY_MODS_SHIFT_RIGHT: ghostty_input_mods_e = 64;
pub const ghostty_input_mods_e_GHOSTTY_MODS_CTRL_RIGHT: ghostty_input_mods_e = 128;
pub const ghostty_input_mods_e_GHOSTTY_MODS_ALT_RIGHT: ghostty_input_mods_e = 256;
pub const ghostty_input_mods_e_GHOSTTY_MODS_SUPER_RIGHT: ghostty_input_mods_e = 512;
pub type ghostty_input_mods_e = ::std::os::raw::c_uint;
pub const ghostty_input_action_e_GHOSTTY_ACTION_RELEASE: ghostty_input_action_e = 0;
pub const ghostty_input_action_e_GHOSTTY_ACTION_PRESS: ghostty_input_action_e = 1;
pub const ghostty_input_action_e_GHOSTTY_ACTION_REPEAT: ghostty_input_action_e = 2;
pub type ghostty_input_action_e = ::std::os::raw::c_uint;
pub const ghostty_input_key_e_GHOSTTY_KEY_INVALID: ghostty_input_key_e = 0;
pub const ghostty_input_key_e_GHOSTTY_KEY_A: ghostty_input_key_e = 1;
pub const ghostty_input_key_e_GHOSTTY_KEY_B: ghostty_input_key_e = 2;
pub const ghostty_input_key_e_GHOSTTY_KEY_C: ghostty_input_key_e = 3;
pub const ghostty_input_key_e_GHOSTTY_KEY_D: ghostty_input_key_e = 4;
pub const ghostty_input_key_e_GHOSTTY_KEY_E: ghostty_input_key_e = 5;
pub const ghostty_input_key_e_GHOSTTY_KEY_F: ghostty_input_key_e = 6;
pub const ghostty_input_key_e_GHOSTTY_KEY_G: ghostty_input_key_e = 7;
pub const ghostty_input_key_e_GHOSTTY_KEY_H: ghostty_input_key_e = 8;
pub const ghostty_input_key_e_GHOSTTY_KEY_I: ghostty_input_key_e = 9;
pub const ghostty_input_key_e_GHOSTTY_KEY_J: ghostty_input_key_e = 10;
pub const ghostty_input_key_e_GHOSTTY_KEY_K: ghostty_input_key_e = 11;
pub const ghostty_input_key_e_GHOSTTY_KEY_L: ghostty_input_key_e = 12;
pub const ghostty_input_key_e_GHOSTTY_KEY_M: ghostty_input_key_e = 13;
pub const ghostty_input_key_e_GHOSTTY_KEY_N: ghostty_input_key_e = 14;
pub const ghostty_input_key_e_GHOSTTY_KEY_O: ghostty_input_key_e = 15;
pub const ghostty_input_key_e_GHOSTTY_KEY_P: ghostty_input_key_e = 16;
pub const ghostty_input_key_e_GHOSTTY_KEY_Q: ghostty_input_key_e = 17;
pub const ghostty_input_key_e_GHOSTTY_KEY_R: ghostty_input_key_e = 18;
pub const ghostty_input_key_e_GHOSTTY_KEY_S: ghostty_input_key_e = 19;
pub const ghostty_input_key_e_GHOSTTY_KEY_T: ghostty_input_key_e = 20;
pub const ghostty_input_key_e_GHOSTTY_KEY_U: ghostty_input_key_e = 21;
pub const ghostty_input_key_e_GHOSTTY_KEY_V: ghostty_input_key_e = 22;
pub const ghostty_input_key_e_GHOSTTY_KEY_W: ghostty_input_key_e = 23;
pub const ghostty_input_key_e_GHOSTTY_KEY_X: ghostty_input_key_e = 24;
pub const ghostty_input_key_e_GHOSTTY_KEY_Y: ghostty_input_key_e = 25;
pub const ghostty_input_key_e_GHOSTTY_KEY_Z: ghostty_input_key_e = 26;
pub const ghostty_input_key_e_GHOSTTY_KEY_ZERO: ghostty_input_key_e = 27;
pub const ghostty_input_key_e_GHOSTTY_KEY_ONE: ghostty_input_key_e = 28;
pub const ghostty_input_key_e_GHOSTTY_KEY_TWO: ghostty_input_key_e = 29;
pub const ghostty_input_key_e_GHOSTTY_KEY_THREE: ghostty_input_key_e = 30;
pub const ghostty_input_key_e_GHOSTTY_KEY_FOUR: ghostty_input_key_e = 31;
pub const ghostty_input_key_e_GHOSTTY_KEY_FIVE: ghostty_input_key_e = 32;
pub const ghostty_input_key_e_GHOSTTY_KEY_SIX: ghostty_input_key_e = 33;
pub const ghostty_input_key_e_GHOSTTY_KEY_SEVEN: ghostty_input_key_e = 34;
pub const ghostty_input_key_e_GHOSTTY_KEY_EIGHT: ghostty_input_key_e = 35;
pub const ghostty_input_key_e_GHOSTTY_KEY_NINE: ghostty_input_key_e = 36;
pub const ghostty_input_key_e_GHOSTTY_KEY_SEMICOLON: ghostty_input_key_e = 37;
pub const ghostty_input_key_e_GHOSTTY_KEY_SPACE: ghostty_input_key_e = 38;
pub const ghostty_input_key_e_GHOSTTY_KEY_APOSTROPHE: ghostty_input_key_e = 39;
pub const ghostty_input_key_e_GHOSTTY_KEY_COMMA: ghostty_input_key_e = 40;
pub const ghostty_input_key_e_GHOSTTY_KEY_GRAVE_ACCENT: ghostty_input_key_e = 41;
pub const ghostty_input_key_e_GHOSTTY_KEY_PERIOD: ghostty_input_key_e = 42;
pub const ghostty_input_key_e_GHOSTTY_KEY_SLASH: ghostty_input_key_e = 43;
pub const ghostty_input_key_e_GHOSTTY_KEY_MINUS: ghostty_input_key_e = 44;
pub const ghostty_input_key_e_GHOSTTY_KEY_PLUS: ghostty_input_key_e = 45;
pub const ghostty_input_key_e_GHOSTTY_KEY_EQUAL: ghostty_input_key_e = 46;
pub const ghostty_input_key_e_GHOSTTY_KEY_LEFT_BRACKET: ghostty_input_key_e = 47;
pub const ghostty_input_key_e_GHOSTTY_KEY_RIGHT_BRACKET: ghostty_input_key_e = 48;
pub const ghostty_input_key_e_GHOSTTY_KEY_BACKSLASH: ghostty_input_key_e = 49;
pub const ghostty_input_key_e_GHOSTTY_KEY_UP: ghostty_input_key_e = 50;
pub const ghostty_input_key_e_GHOSTTY_KEY_DOWN: ghostty_input_key_e = 51;
pub const ghostty_input_key_e_GHOSTTY_KEY_RIGHT: ghostty_input_key_e = 52;
pub const ghostty_input_key_e_GHOSTTY_KEY_LEFT: ghostty_input_key_e = 53;
pub const ghostty_input_key_e_GHOSTTY_KEY_HOME: ghostty_input_key_e = 54;
pub const ghostty_input_key_e_GHOSTTY_KEY_END: ghostty_input_key_e = 55;
pub const ghostty_input_key_e_GHOSTTY_KEY_INSERT: ghostty_input_key_e = 56;
pub const ghostty_input_key_e_GHOSTTY_KEY_DELETE: ghostty_input_key_e = 57;
pub const ghostty_input_key_e_GHOSTTY_KEY_CAPS_LOCK: ghostty_input_key_e = 58;
pub const ghostty_input_key_e_GHOSTTY_KEY_SCROLL_LOCK: ghostty_input_key_e = 59;
pub const ghostty_input_key_e_GHOSTTY_KEY_NUM_LOCK: ghostty_input_key_e = 60;
pub const ghostty_input_key_e_GHOSTTY_KEY_PAGE_UP: ghostty_input_key_e = 61;
pub const ghostty_input_key_e_GHOSTTY_KEY_PAGE_DOWN: ghostty_input_key_e = 62;
pub const ghostty_input_key_e_GHOSTTY_KEY_ESCAPE: ghostty_input_key_e = 63;
pub const ghostty_input_key_e_GHOSTTY_KEY_ENTER: ghostty_input_key_e = 64;
pub const ghostty_input_key_e_GHOSTTY_KEY_TAB: ghostty_input_key_e = 65;
pub const ghostty_input_key_e_GHOSTTY_KEY_BACKSPACE: ghostty_input_key_e = 66;
pub const ghostty_input_key_e_GHOSTTY_KEY_PRINT_SCREEN: ghostty_input_key_e = 67;
pub const ghostty_input_key_e_GHOSTTY_KEY_PAUSE: ghostty_input_key_e = 68;
pub const ghostty_input_key_e_GHOSTTY_KEY_F1: ghostty_input_key_e = 69;
pub const ghostty_input_key_e_GHOSTTY_KEY_F2: ghostty_input_key_e = 70;
pub const ghostty_input_key_e_GHOSTTY_KEY_F3: ghostty_input_key_e = 71;
pub const ghostty_input_key_e_GHOSTTY_KEY_F4: ghostty_input_key_e = 72;
pub const ghostty_input_key_e_GHOSTTY_KEY_F5: ghostty_input_key_e = 73;
pub const ghostty_input_key_e_GHOSTTY_KEY_F6: ghostty_input_key_e = 74;
pub const ghostty_input_key_e_GHOSTTY_KEY_F7: ghostty_input_key_e = 75;
pub const ghostty_input_key_e_GHOSTTY_KEY_F8: ghostty_input_key_e = 76;
pub const ghostty_input_key_e_GHOSTTY_KEY_F9: ghostty_input_key_e = 77;
pub const ghostty_input_key_e_GHOSTTY_KEY_F10: ghostty_input_key_e = 78;
pub const ghostty_input_key_e_GHOSTTY_KEY_F11: ghostty_input_key_e = 79;
pub const ghostty_input_key_e_GHOSTTY_KEY_F12: ghostty_input_key_e = 80;
pub const ghostty_input_key_e_GHOSTTY_KEY_F13: ghostty_input_key_e = 81;
pub const ghostty_input_key_e_GHOSTTY_KEY_F14: ghostty_input_key_e = 82;
pub const ghostty_input_key_e_GHOSTTY_KEY_F15: ghostty_input_key_e = 83;
pub const ghostty_input_key_e_GHOSTTY_KEY_F16: ghostty_input_key_e = 84;
pub const ghostty_input_key_e_GHOSTTY_KEY_F17: ghostty_input_key_e = 85;
pub const ghostty_input_key_e_GHOSTTY_KEY_F18: ghostty_input_key_e = 86;
pub const ghostty_input_key_e_GHOSTTY_KEY_F19: ghostty_input_key_e = 87;
pub const ghostty_input_key_e_GHOSTTY_KEY_F20: ghostty_input_key_e = 88;
pub const ghostty_input_key_e_GHOSTTY_KEY_F21: ghostty_input_key_e = 89;
pub const ghostty_input_key_e_GHOSTTY_KEY_F22: ghostty_input_key_e = 90;
pub const ghostty_input_key_e_GHOSTTY_KEY_F23: ghostty_input_key_e = 91;
pub const ghostty_input_key_e_GHOSTTY_KEY_F24: ghostty_input_key_e = 92;
pub const ghostty_input_key_e_GHOSTTY_KEY_F25: ghostty_input_key_e = 93;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_0: ghostty_input_key_e = 94;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_1: ghostty_input_key_e = 95;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_2: ghostty_input_key_e = 96;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_3: ghostty_input_key_e = 97;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_4: ghostty_input_key_e = 98;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_5: ghostty_input_key_e = 99;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_6: ghostty_input_key_e = 100;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_7: ghostty_input_key_e = 101;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_8: ghostty_input_key_e = 102;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_9: ghostty_input_key_e = 103;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_DECIMAL: ghostty_input_key_e = 104;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_DIVIDE: ghostty_input_key_e = 105;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_MULTIPLY: ghostty_input_key_e = 106;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_SUBTRACT: ghostty_input_key_e = 107;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_ADD: ghostty_input_key_e = 108;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_ENTER: ghostty_input_key_e = 109;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_EQUAL: ghostty_input_key_e = 110;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_SEPARATOR: ghostty_input_key_e = 111;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_LEFT: ghostty_input_key_e = 112;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_RIGHT: ghostty_input_key_e = 113;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_UP: ghostty_input_key_e = 114;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_DOWN: ghostty_input_key_e = 115;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_PAGE_UP: ghostty_input_key_e = 116;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_PAGE_DOWN: ghostty_input_key_e = 117;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_HOME: ghostty_input_key_e = 118;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_END: ghostty_input_key_e = 119;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_INSERT: ghostty_input_key_e = 120;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_DELETE: ghostty_input_key_e = 121;
pub const ghostty_input_key_e_GHOSTTY_KEY_KP_BEGIN: ghostty_input_key_e = 122;
pub const ghostty_input_key_e_GHOSTTY_KEY_LEFT_SHIFT: ghostty_input_key_e = 123;
pub const ghostty_input_key_e_GHOSTTY_KEY_LEFT_CONTROL: ghostty_input_key_e = 124;
pub const ghostty_input_key_e_GHOSTTY_KEY_LEFT_ALT: ghostty_input_key_e = 125;
pub const ghostty_input_key_e_GHOSTTY_KEY_LEFT_SUPER: ghostty_input_key_e = 126;
pub const ghostty_input_key_e_GHOSTTY_KEY_RIGHT_SHIFT: ghostty_input_key_e = 127;
pub const ghostty_input_key_e_GHOSTTY_KEY_RIGHT_CONTROL: ghostty_input_key_e = 128;
pub const ghostty_input_key_e_GHOSTTY_KEY_RIGHT_ALT: ghostty_input_key_e = 129;
pub const ghostty_input_key_e_GHOSTTY_KEY_RIGHT_SUPER: ghostty_input_key_e = 130;
pub type ghostty_input_key_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_input_key_s {
    pub action: ghostty_input_action_e,
    pub mods: ghostty_input_mods_e,
    pub keycode: u32,
    pub text: *const ::std::os::raw::c_char,
    pub composing: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_input_key_s"][::std::mem::size_of::<ghostty_input_key_s>() - 32usize];
    ["Alignment of ghostty_input_key_s"][::std::mem::align_of::<ghostty_input_key_s>() - 8usize];
    ["Offset of field: ghostty_input_key_s::action"]
        [::std::mem::offset_of!(ghostty_input_key_s, action) - 0usize];
    ["Offset of field: ghostty_input_key_s::mods"]
        [::std::mem::offset_of!(ghostty_input_key_s, mods) - 4usize];
    ["Offset of field: ghostty_input_key_s::keycode"]
        [::std::mem::offset_of!(ghostty_input_key_s, keycode) - 8usize];
    ["Offset of field: ghostty_input_key_s::text"]
        [::std::mem::offset_of!(ghostty_input_key_s, text) - 16usize];
    ["Offset of field: ghostty_input_key_s::composing"]
        [::std::mem::offset_of!(ghostty_input_key_s, composing) - 24usize];
};
pub const ghostty_input_trigger_tag_e_GHOSTTY_TRIGGER_TRANSLATED: ghostty_input_trigger_tag_e = 0;
pub const ghostty_input_trigger_tag_e_GHOSTTY_TRIGGER_PHYSICAL: ghostty_input_trigger_tag_e = 1;
pub const ghostty_input_trigger_tag_e_GHOSTTY_TRIGGER_UNICODE: ghostty_input_trigger_tag_e = 2;
pub type ghostty_input_trigger_tag_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ghostty_input_trigger_key_u {
    pub translated: ghostty_input_key_e,
    pub physical: ghostty_input_key_e,
    pub unicode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_input_trigger_key_u"]
        [::std::mem::size_of::<ghostty_input_trigger_key_u>() - 4usize];
    ["Alignment of ghostty_input_trigger_key_u"]
        [::std::mem::align_of::<ghostty_input_trigger_key_u>() - 4usize];
    ["Offset of field: ghostty_input_trigger_key_u::translated"]
        [::std::mem::offset_of!(ghostty_input_trigger_key_u, translated) - 0usize];
    ["Offset of field: ghostty_input_trigger_key_u::physical"]
        [::std::mem::offset_of!(ghostty_input_trigger_key_u, physical) - 0usize];
    ["Offset of field: ghostty_input_trigger_key_u::unicode"]
        [::std::mem::offset_of!(ghostty_input_trigger_key_u, unicode) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ghostty_input_trigger_s {
    pub tag: ghostty_input_trigger_tag_e,
    pub key: ghostty_input_trigger_key_u,
    pub mods: ghostty_input_mods_e,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_input_trigger_s"][::std::mem::size_of::<ghostty_input_trigger_s>() - 12usize];
    ["Alignment of ghostty_input_trigger_s"]
        [::std::mem::align_of::<ghostty_input_trigger_s>() - 4usize];
    ["Offset of field: ghostty_input_trigger_s::tag"]
        [::std::mem::offset_of!(ghostty_input_trigger_s, tag) - 0usize];
    ["Offset of field: ghostty_input_trigger_s::key"]
        [::std::mem::offset_of!(ghostty_input_trigger_s, key) - 4usize];
    ["Offset of field: ghostty_input_trigger_s::mods"]
        [::std::mem::offset_of!(ghostty_input_trigger_s, mods) - 8usize];
};
pub const ghostty_build_mode_e_GHOSTTY_BUILD_MODE_DEBUG: ghostty_build_mode_e = 0;
pub const ghostty_build_mode_e_GHOSTTY_BUILD_MODE_RELEASE_SAFE: ghostty_build_mode_e = 1;
pub const ghostty_build_mode_e_GHOSTTY_BUILD_MODE_RELEASE_FAST: ghostty_build_mode_e = 2;
pub const ghostty_build_mode_e_GHOSTTY_BUILD_MODE_RELEASE_SMALL: ghostty_build_mode_e = 3;
pub type ghostty_build_mode_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_info_s {
    pub build_mode: ghostty_build_mode_e,
    pub version: *const ::std::os::raw::c_char,
    pub version_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_info_s"][::std::mem::size_of::<ghostty_info_s>() - 24usize];
    ["Alignment of ghostty_info_s"][::std::mem::align_of::<ghostty_info_s>() - 8usize];
    ["Offset of field: ghostty_info_s::build_mode"]
        [::std::mem::offset_of!(ghostty_info_s, build_mode) - 0usize];
    ["Offset of field: ghostty_info_s::version"]
        [::std::mem::offset_of!(ghostty_info_s, version) - 8usize];
    ["Offset of field: ghostty_info_s::version_len"]
        [::std::mem::offset_of!(ghostty_info_s, version_len) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_diagnostic_s {
    pub message: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_diagnostic_s"][::std::mem::size_of::<ghostty_diagnostic_s>() - 8usize];
    ["Alignment of ghostty_diagnostic_s"][::std::mem::align_of::<ghostty_diagnostic_s>() - 8usize];
    ["Offset of field: ghostty_diagnostic_s::message"]
        [::std::mem::offset_of!(ghostty_diagnostic_s, message) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_selection_s {
    pub tl_px_x: f64,
    pub tl_px_y: f64,
    pub offset_start: u32,
    pub offset_len: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_selection_s"][::std::mem::size_of::<ghostty_selection_s>() - 24usize];
    ["Alignment of ghostty_selection_s"][::std::mem::align_of::<ghostty_selection_s>() - 8usize];
    ["Offset of field: ghostty_selection_s::tl_px_x"]
        [::std::mem::offset_of!(ghostty_selection_s, tl_px_x) - 0usize];
    ["Offset of field: ghostty_selection_s::tl_px_y"]
        [::std::mem::offset_of!(ghostty_selection_s, tl_px_y) - 8usize];
    ["Offset of field: ghostty_selection_s::offset_start"]
        [::std::mem::offset_of!(ghostty_selection_s, offset_start) - 16usize];
    ["Offset of field: ghostty_selection_s::offset_len"]
        [::std::mem::offset_of!(ghostty_selection_s, offset_len) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_platform_macos_s {
    pub nsview: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_platform_macos_s"]
        [::std::mem::size_of::<ghostty_platform_macos_s>() - 8usize];
    ["Alignment of ghostty_platform_macos_s"]
        [::std::mem::align_of::<ghostty_platform_macos_s>() - 8usize];
    ["Offset of field: ghostty_platform_macos_s::nsview"]
        [::std::mem::offset_of!(ghostty_platform_macos_s, nsview) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_platform_ios_s {
    pub uiview: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_platform_ios_s"][::std::mem::size_of::<ghostty_platform_ios_s>() - 8usize];
    ["Alignment of ghostty_platform_ios_s"]
        [::std::mem::align_of::<ghostty_platform_ios_s>() - 8usize];
    ["Offset of field: ghostty_platform_ios_s::uiview"]
        [::std::mem::offset_of!(ghostty_platform_ios_s, uiview) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ghostty_platform_u {
    pub macos: ghostty_platform_macos_s,
    pub ios: ghostty_platform_ios_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_platform_u"][::std::mem::size_of::<ghostty_platform_u>() - 8usize];
    ["Alignment of ghostty_platform_u"][::std::mem::align_of::<ghostty_platform_u>() - 8usize];
    ["Offset of field: ghostty_platform_u::macos"]
        [::std::mem::offset_of!(ghostty_platform_u, macos) - 0usize];
    ["Offset of field: ghostty_platform_u::ios"]
        [::std::mem::offset_of!(ghostty_platform_u, ios) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ghostty_surface_config_s {
    pub platform_tag: ghostty_platform_e,
    pub platform: ghostty_platform_u,
    pub userdata: *mut ::std::os::raw::c_void,
    pub scale_factor: f64,
    pub font_size: f32,
    pub working_directory: *const ::std::os::raw::c_char,
    pub command: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_surface_config_s"]
        [::std::mem::size_of::<ghostty_surface_config_s>() - 56usize];
    ["Alignment of ghostty_surface_config_s"]
        [::std::mem::align_of::<ghostty_surface_config_s>() - 8usize];
    ["Offset of field: ghostty_surface_config_s::platform_tag"]
        [::std::mem::offset_of!(ghostty_surface_config_s, platform_tag) - 0usize];
    ["Offset of field: ghostty_surface_config_s::platform"]
        [::std::mem::offset_of!(ghostty_surface_config_s, platform) - 8usize];
    ["Offset of field: ghostty_surface_config_s::userdata"]
        [::std::mem::offset_of!(ghostty_surface_config_s, userdata) - 16usize];
    ["Offset of field: ghostty_surface_config_s::scale_factor"]
        [::std::mem::offset_of!(ghostty_surface_config_s, scale_factor) - 24usize];
    ["Offset of field: ghostty_surface_config_s::font_size"]
        [::std::mem::offset_of!(ghostty_surface_config_s, font_size) - 32usize];
    ["Offset of field: ghostty_surface_config_s::working_directory"]
        [::std::mem::offset_of!(ghostty_surface_config_s, working_directory) - 40usize];
    ["Offset of field: ghostty_surface_config_s::command"]
        [::std::mem::offset_of!(ghostty_surface_config_s, command) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_surface_size_s {
    pub columns: u16,
    pub rows: u16,
    pub width_px: u32,
    pub height_px: u32,
    pub cell_width_px: u32,
    pub cell_height_px: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_surface_size_s"][::std::mem::size_of::<ghostty_surface_size_s>() - 20usize];
    ["Alignment of ghostty_surface_size_s"]
        [::std::mem::align_of::<ghostty_surface_size_s>() - 4usize];
    ["Offset of field: ghostty_surface_size_s::columns"]
        [::std::mem::offset_of!(ghostty_surface_size_s, columns) - 0usize];
    ["Offset of field: ghostty_surface_size_s::rows"]
        [::std::mem::offset_of!(ghostty_surface_size_s, rows) - 2usize];
    ["Offset of field: ghostty_surface_size_s::width_px"]
        [::std::mem::offset_of!(ghostty_surface_size_s, width_px) - 4usize];
    ["Offset of field: ghostty_surface_size_s::height_px"]
        [::std::mem::offset_of!(ghostty_surface_size_s, height_px) - 8usize];
    ["Offset of field: ghostty_surface_size_s::cell_width_px"]
        [::std::mem::offset_of!(ghostty_surface_size_s, cell_width_px) - 12usize];
    ["Offset of field: ghostty_surface_size_s::cell_height_px"]
        [::std::mem::offset_of!(ghostty_surface_size_s, cell_height_px) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_config_color_s {
    pub r: u8,
    pub g: u8,
    pub b: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_config_color_s"][::std::mem::size_of::<ghostty_config_color_s>() - 3usize];
    ["Alignment of ghostty_config_color_s"]
        [::std::mem::align_of::<ghostty_config_color_s>() - 1usize];
    ["Offset of field: ghostty_config_color_s::r"]
        [::std::mem::offset_of!(ghostty_config_color_s, r) - 0usize];
    ["Offset of field: ghostty_config_color_s::g"]
        [::std::mem::offset_of!(ghostty_config_color_s, g) - 1usize];
    ["Offset of field: ghostty_config_color_s::b"]
        [::std::mem::offset_of!(ghostty_config_color_s, b) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_config_color_list_s {
    pub colors: *const ghostty_config_color_s,
    pub len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_config_color_list_s"]
        [::std::mem::size_of::<ghostty_config_color_list_s>() - 16usize];
    ["Alignment of ghostty_config_color_list_s"]
        [::std::mem::align_of::<ghostty_config_color_list_s>() - 8usize];
    ["Offset of field: ghostty_config_color_list_s::colors"]
        [::std::mem::offset_of!(ghostty_config_color_list_s, colors) - 0usize];
    ["Offset of field: ghostty_config_color_list_s::len"]
        [::std::mem::offset_of!(ghostty_config_color_list_s, len) - 8usize];
};
pub const ghostty_target_tag_e_GHOSTTY_TARGET_APP: ghostty_target_tag_e = 0;
pub const ghostty_target_tag_e_GHOSTTY_TARGET_SURFACE: ghostty_target_tag_e = 1;
pub type ghostty_target_tag_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ghostty_target_u {
    pub surface: ghostty_surface_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_target_u"][::std::mem::size_of::<ghostty_target_u>() - 8usize];
    ["Alignment of ghostty_target_u"][::std::mem::align_of::<ghostty_target_u>() - 8usize];
    ["Offset of field: ghostty_target_u::surface"]
        [::std::mem::offset_of!(ghostty_target_u, surface) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ghostty_target_s {
    pub tag: ghostty_target_tag_e,
    pub target: ghostty_target_u,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_target_s"][::std::mem::size_of::<ghostty_target_s>() - 16usize];
    ["Alignment of ghostty_target_s"][::std::mem::align_of::<ghostty_target_s>() - 8usize];
    ["Offset of field: ghostty_target_s::tag"]
        [::std::mem::offset_of!(ghostty_target_s, tag) - 0usize];
    ["Offset of field: ghostty_target_s::target"]
        [::std::mem::offset_of!(ghostty_target_s, target) - 8usize];
};
pub const ghostty_action_split_direction_e_GHOSTTY_SPLIT_DIRECTION_RIGHT:
    ghostty_action_split_direction_e = 0;
pub const ghostty_action_split_direction_e_GHOSTTY_SPLIT_DIRECTION_DOWN:
    ghostty_action_split_direction_e = 1;
pub const ghostty_action_split_direction_e_GHOSTTY_SPLIT_DIRECTION_LEFT:
    ghostty_action_split_direction_e = 2;
pub const ghostty_action_split_direction_e_GHOSTTY_SPLIT_DIRECTION_UP:
    ghostty_action_split_direction_e = 3;
pub type ghostty_action_split_direction_e = ::std::os::raw::c_uint;
pub const ghostty_action_goto_split_e_GHOSTTY_GOTO_SPLIT_PREVIOUS: ghostty_action_goto_split_e = 0;
pub const ghostty_action_goto_split_e_GHOSTTY_GOTO_SPLIT_NEXT: ghostty_action_goto_split_e = 1;
pub const ghostty_action_goto_split_e_GHOSTTY_GOTO_SPLIT_UP: ghostty_action_goto_split_e = 2;
pub const ghostty_action_goto_split_e_GHOSTTY_GOTO_SPLIT_LEFT: ghostty_action_goto_split_e = 3;
pub const ghostty_action_goto_split_e_GHOSTTY_GOTO_SPLIT_DOWN: ghostty_action_goto_split_e = 4;
pub const ghostty_action_goto_split_e_GHOSTTY_GOTO_SPLIT_RIGHT: ghostty_action_goto_split_e = 5;
pub type ghostty_action_goto_split_e = ::std::os::raw::c_uint;
pub const ghostty_action_resize_split_direction_e_GHOSTTY_RESIZE_SPLIT_UP:
    ghostty_action_resize_split_direction_e = 0;
pub const ghostty_action_resize_split_direction_e_GHOSTTY_RESIZE_SPLIT_DOWN:
    ghostty_action_resize_split_direction_e = 1;
pub const ghostty_action_resize_split_direction_e_GHOSTTY_RESIZE_SPLIT_LEFT:
    ghostty_action_resize_split_direction_e = 2;
pub const ghostty_action_resize_split_direction_e_GHOSTTY_RESIZE_SPLIT_RIGHT:
    ghostty_action_resize_split_direction_e = 3;
pub type ghostty_action_resize_split_direction_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_action_resize_split_s {
    pub amount: u16,
    pub direction: ghostty_action_resize_split_direction_e,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_resize_split_s"]
        [::std::mem::size_of::<ghostty_action_resize_split_s>() - 8usize];
    ["Alignment of ghostty_action_resize_split_s"]
        [::std::mem::align_of::<ghostty_action_resize_split_s>() - 4usize];
    ["Offset of field: ghostty_action_resize_split_s::amount"]
        [::std::mem::offset_of!(ghostty_action_resize_split_s, amount) - 0usize];
    ["Offset of field: ghostty_action_resize_split_s::direction"]
        [::std::mem::offset_of!(ghostty_action_resize_split_s, direction) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_action_move_tab_s {
    pub amount: isize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_move_tab_s"]
        [::std::mem::size_of::<ghostty_action_move_tab_s>() - 8usize];
    ["Alignment of ghostty_action_move_tab_s"]
        [::std::mem::align_of::<ghostty_action_move_tab_s>() - 8usize];
    ["Offset of field: ghostty_action_move_tab_s::amount"]
        [::std::mem::offset_of!(ghostty_action_move_tab_s, amount) - 0usize];
};
pub const ghostty_action_goto_tab_e_GHOSTTY_GOTO_TAB_PREVIOUS: ghostty_action_goto_tab_e = -1;
pub const ghostty_action_goto_tab_e_GHOSTTY_GOTO_TAB_NEXT: ghostty_action_goto_tab_e = -2;
pub const ghostty_action_goto_tab_e_GHOSTTY_GOTO_TAB_LAST: ghostty_action_goto_tab_e = -3;
pub type ghostty_action_goto_tab_e = ::std::os::raw::c_int;
pub const ghostty_action_fullscreen_e_GHOSTTY_FULLSCREEN_NATIVE: ghostty_action_fullscreen_e = 0;
pub const ghostty_action_fullscreen_e_GHOSTTY_FULLSCREEN_NON_NATIVE: ghostty_action_fullscreen_e =
    1;
pub const ghostty_action_fullscreen_e_GHOSTTY_FULLSCREEN_NON_NATIVE_VISIBLE_MENU:
    ghostty_action_fullscreen_e = 2;
pub type ghostty_action_fullscreen_e = ::std::os::raw::c_uint;
pub const ghostty_action_secure_input_e_GHOSTTY_SECURE_INPUT_ON: ghostty_action_secure_input_e = 0;
pub const ghostty_action_secure_input_e_GHOSTTY_SECURE_INPUT_OFF: ghostty_action_secure_input_e = 1;
pub const ghostty_action_secure_input_e_GHOSTTY_SECURE_INPUT_TOGGLE: ghostty_action_secure_input_e =
    2;
pub type ghostty_action_secure_input_e = ::std::os::raw::c_uint;
pub const ghostty_action_inspector_e_GHOSTTY_INSPECTOR_TOGGLE: ghostty_action_inspector_e = 0;
pub const ghostty_action_inspector_e_GHOSTTY_INSPECTOR_SHOW: ghostty_action_inspector_e = 1;
pub const ghostty_action_inspector_e_GHOSTTY_INSPECTOR_HIDE: ghostty_action_inspector_e = 2;
pub type ghostty_action_inspector_e = ::std::os::raw::c_uint;
pub const ghostty_action_quit_timer_e_GHOSTTY_QUIT_TIMER_START: ghostty_action_quit_timer_e = 0;
pub const ghostty_action_quit_timer_e_GHOSTTY_QUIT_TIMER_STOP: ghostty_action_quit_timer_e = 1;
pub type ghostty_action_quit_timer_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_action_desktop_notification_s {
    pub title: *const ::std::os::raw::c_char,
    pub body: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_desktop_notification_s"]
        [::std::mem::size_of::<ghostty_action_desktop_notification_s>() - 16usize];
    ["Alignment of ghostty_action_desktop_notification_s"]
        [::std::mem::align_of::<ghostty_action_desktop_notification_s>() - 8usize];
    ["Offset of field: ghostty_action_desktop_notification_s::title"]
        [::std::mem::offset_of!(ghostty_action_desktop_notification_s, title) - 0usize];
    ["Offset of field: ghostty_action_desktop_notification_s::body"]
        [::std::mem::offset_of!(ghostty_action_desktop_notification_s, body) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_action_set_title_s {
    pub title: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_set_title_s"]
        [::std::mem::size_of::<ghostty_action_set_title_s>() - 8usize];
    ["Alignment of ghostty_action_set_title_s"]
        [::std::mem::align_of::<ghostty_action_set_title_s>() - 8usize];
    ["Offset of field: ghostty_action_set_title_s::title"]
        [::std::mem::offset_of!(ghostty_action_set_title_s, title) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_action_pwd_s {
    pub pwd: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_pwd_s"][::std::mem::size_of::<ghostty_action_pwd_s>() - 8usize];
    ["Alignment of ghostty_action_pwd_s"][::std::mem::align_of::<ghostty_action_pwd_s>() - 8usize];
    ["Offset of field: ghostty_action_pwd_s::pwd"]
        [::std::mem::offset_of!(ghostty_action_pwd_s, pwd) - 0usize];
};
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_DEFAULT: ghostty_action_mouse_shape_e =
    0;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_CONTEXT_MENU:
    ghostty_action_mouse_shape_e = 1;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_HELP: ghostty_action_mouse_shape_e = 2;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_POINTER: ghostty_action_mouse_shape_e =
    3;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_PROGRESS: ghostty_action_mouse_shape_e =
    4;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_WAIT: ghostty_action_mouse_shape_e = 5;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_CELL: ghostty_action_mouse_shape_e = 6;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_CROSSHAIR: ghostty_action_mouse_shape_e =
    7;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_TEXT: ghostty_action_mouse_shape_e = 8;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_VERTICAL_TEXT:
    ghostty_action_mouse_shape_e = 9;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_ALIAS: ghostty_action_mouse_shape_e = 10;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_COPY: ghostty_action_mouse_shape_e = 11;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_MOVE: ghostty_action_mouse_shape_e = 12;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_NO_DROP: ghostty_action_mouse_shape_e =
    13;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_NOT_ALLOWED:
    ghostty_action_mouse_shape_e = 14;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_GRAB: ghostty_action_mouse_shape_e = 15;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_GRABBING: ghostty_action_mouse_shape_e =
    16;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_ALL_SCROLL:
    ghostty_action_mouse_shape_e = 17;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_COL_RESIZE:
    ghostty_action_mouse_shape_e = 18;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_ROW_RESIZE:
    ghostty_action_mouse_shape_e = 19;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_N_RESIZE: ghostty_action_mouse_shape_e =
    20;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_E_RESIZE: ghostty_action_mouse_shape_e =
    21;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_S_RESIZE: ghostty_action_mouse_shape_e =
    22;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_W_RESIZE: ghostty_action_mouse_shape_e =
    23;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_NE_RESIZE: ghostty_action_mouse_shape_e =
    24;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_NW_RESIZE: ghostty_action_mouse_shape_e =
    25;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_SE_RESIZE: ghostty_action_mouse_shape_e =
    26;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_SW_RESIZE: ghostty_action_mouse_shape_e =
    27;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_EW_RESIZE: ghostty_action_mouse_shape_e =
    28;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_NS_RESIZE: ghostty_action_mouse_shape_e =
    29;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_NESW_RESIZE:
    ghostty_action_mouse_shape_e = 30;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_NWSE_RESIZE:
    ghostty_action_mouse_shape_e = 31;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_ZOOM_IN: ghostty_action_mouse_shape_e =
    32;
pub const ghostty_action_mouse_shape_e_GHOSTTY_MOUSE_SHAPE_ZOOM_OUT: ghostty_action_mouse_shape_e =
    33;
pub type ghostty_action_mouse_shape_e = ::std::os::raw::c_uint;
pub const ghostty_action_mouse_visibility_e_GHOSTTY_MOUSE_VISIBLE:
    ghostty_action_mouse_visibility_e = 0;
pub const ghostty_action_mouse_visibility_e_GHOSTTY_MOUSE_HIDDEN:
    ghostty_action_mouse_visibility_e = 1;
pub type ghostty_action_mouse_visibility_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_action_mouse_over_link_s {
    pub url: *const ::std::os::raw::c_char,
    pub len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_mouse_over_link_s"]
        [::std::mem::size_of::<ghostty_action_mouse_over_link_s>() - 16usize];
    ["Alignment of ghostty_action_mouse_over_link_s"]
        [::std::mem::align_of::<ghostty_action_mouse_over_link_s>() - 8usize];
    ["Offset of field: ghostty_action_mouse_over_link_s::url"]
        [::std::mem::offset_of!(ghostty_action_mouse_over_link_s, url) - 0usize];
    ["Offset of field: ghostty_action_mouse_over_link_s::len"]
        [::std::mem::offset_of!(ghostty_action_mouse_over_link_s, len) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_action_size_limit_s {
    pub min_width: u32,
    pub min_height: u32,
    pub max_width: u32,
    pub max_height: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_size_limit_s"]
        [::std::mem::size_of::<ghostty_action_size_limit_s>() - 16usize];
    ["Alignment of ghostty_action_size_limit_s"]
        [::std::mem::align_of::<ghostty_action_size_limit_s>() - 4usize];
    ["Offset of field: ghostty_action_size_limit_s::min_width"]
        [::std::mem::offset_of!(ghostty_action_size_limit_s, min_width) - 0usize];
    ["Offset of field: ghostty_action_size_limit_s::min_height"]
        [::std::mem::offset_of!(ghostty_action_size_limit_s, min_height) - 4usize];
    ["Offset of field: ghostty_action_size_limit_s::max_width"]
        [::std::mem::offset_of!(ghostty_action_size_limit_s, max_width) - 8usize];
    ["Offset of field: ghostty_action_size_limit_s::max_height"]
        [::std::mem::offset_of!(ghostty_action_size_limit_s, max_height) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_action_initial_size_s {
    pub width: u32,
    pub height: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_initial_size_s"]
        [::std::mem::size_of::<ghostty_action_initial_size_s>() - 8usize];
    ["Alignment of ghostty_action_initial_size_s"]
        [::std::mem::align_of::<ghostty_action_initial_size_s>() - 4usize];
    ["Offset of field: ghostty_action_initial_size_s::width"]
        [::std::mem::offset_of!(ghostty_action_initial_size_s, width) - 0usize];
    ["Offset of field: ghostty_action_initial_size_s::height"]
        [::std::mem::offset_of!(ghostty_action_initial_size_s, height) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_action_cell_size_s {
    pub width: u32,
    pub height: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_cell_size_s"]
        [::std::mem::size_of::<ghostty_action_cell_size_s>() - 8usize];
    ["Alignment of ghostty_action_cell_size_s"]
        [::std::mem::align_of::<ghostty_action_cell_size_s>() - 4usize];
    ["Offset of field: ghostty_action_cell_size_s::width"]
        [::std::mem::offset_of!(ghostty_action_cell_size_s, width) - 0usize];
    ["Offset of field: ghostty_action_cell_size_s::height"]
        [::std::mem::offset_of!(ghostty_action_cell_size_s, height) - 4usize];
};
pub const ghostty_action_renderer_health_e_GHOSTTY_RENDERER_HEALTH_OK:
    ghostty_action_renderer_health_e = 0;
pub const ghostty_action_renderer_health_e_GHOSTTY_RENDERER_HEALTH_UNHEALTHY:
    ghostty_action_renderer_health_e = 1;
pub type ghostty_action_renderer_health_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ghostty_action_key_sequence_s {
    pub active: bool,
    pub trigger: ghostty_input_trigger_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_key_sequence_s"]
        [::std::mem::size_of::<ghostty_action_key_sequence_s>() - 16usize];
    ["Alignment of ghostty_action_key_sequence_s"]
        [::std::mem::align_of::<ghostty_action_key_sequence_s>() - 4usize];
    ["Offset of field: ghostty_action_key_sequence_s::active"]
        [::std::mem::offset_of!(ghostty_action_key_sequence_s, active) - 0usize];
    ["Offset of field: ghostty_action_key_sequence_s::trigger"]
        [::std::mem::offset_of!(ghostty_action_key_sequence_s, trigger) - 4usize];
};
pub const ghostty_action_color_kind_e_GHOSTTY_ACTION_COLOR_KIND_FOREGROUND:
    ghostty_action_color_kind_e = -1;
pub const ghostty_action_color_kind_e_GHOSTTY_ACTION_COLOR_KIND_BACKGROUND:
    ghostty_action_color_kind_e = -2;
pub const ghostty_action_color_kind_e_GHOSTTY_ACTION_COLOR_KIND_CURSOR:
    ghostty_action_color_kind_e = -3;
pub type ghostty_action_color_kind_e = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_action_color_change_s {
    pub kind: ghostty_action_color_kind_e,
    pub r: u8,
    pub g: u8,
    pub b: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_color_change_s"]
        [::std::mem::size_of::<ghostty_action_color_change_s>() - 8usize];
    ["Alignment of ghostty_action_color_change_s"]
        [::std::mem::align_of::<ghostty_action_color_change_s>() - 4usize];
    ["Offset of field: ghostty_action_color_change_s::kind"]
        [::std::mem::offset_of!(ghostty_action_color_change_s, kind) - 0usize];
    ["Offset of field: ghostty_action_color_change_s::r"]
        [::std::mem::offset_of!(ghostty_action_color_change_s, r) - 4usize];
    ["Offset of field: ghostty_action_color_change_s::g"]
        [::std::mem::offset_of!(ghostty_action_color_change_s, g) - 5usize];
    ["Offset of field: ghostty_action_color_change_s::b"]
        [::std::mem::offset_of!(ghostty_action_color_change_s, b) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_action_config_change_s {
    pub config: ghostty_config_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_config_change_s"]
        [::std::mem::size_of::<ghostty_action_config_change_s>() - 8usize];
    ["Alignment of ghostty_action_config_change_s"]
        [::std::mem::align_of::<ghostty_action_config_change_s>() - 8usize];
    ["Offset of field: ghostty_action_config_change_s::config"]
        [::std::mem::offset_of!(ghostty_action_config_change_s, config) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_action_reload_config_s {
    pub soft: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_reload_config_s"]
        [::std::mem::size_of::<ghostty_action_reload_config_s>() - 1usize];
    ["Alignment of ghostty_action_reload_config_s"]
        [::std::mem::align_of::<ghostty_action_reload_config_s>() - 1usize];
    ["Offset of field: ghostty_action_reload_config_s::soft"]
        [::std::mem::offset_of!(ghostty_action_reload_config_s, soft) - 0usize];
};
pub const ghostty_action_tag_e_GHOSTTY_ACTION_QUIT: ghostty_action_tag_e = 0;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_NEW_WINDOW: ghostty_action_tag_e = 1;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_NEW_TAB: ghostty_action_tag_e = 2;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_CLOSE_TAB: ghostty_action_tag_e = 3;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_NEW_SPLIT: ghostty_action_tag_e = 4;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_CLOSE_ALL_WINDOWS: ghostty_action_tag_e = 5;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_TOGGLE_MAXIMIZE: ghostty_action_tag_e = 6;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_TOGGLE_FULLSCREEN: ghostty_action_tag_e = 7;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_TOGGLE_TAB_OVERVIEW: ghostty_action_tag_e = 8;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_TOGGLE_WINDOW_DECORATIONS: ghostty_action_tag_e = 9;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_TOGGLE_QUICK_TERMINAL: ghostty_action_tag_e = 10;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_TOGGLE_VISIBILITY: ghostty_action_tag_e = 11;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_MOVE_TAB: ghostty_action_tag_e = 12;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_GOTO_TAB: ghostty_action_tag_e = 13;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_GOTO_SPLIT: ghostty_action_tag_e = 14;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_RESIZE_SPLIT: ghostty_action_tag_e = 15;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_EQUALIZE_SPLITS: ghostty_action_tag_e = 16;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_TOGGLE_SPLIT_ZOOM: ghostty_action_tag_e = 17;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_PRESENT_TERMINAL: ghostty_action_tag_e = 18;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_SIZE_LIMIT: ghostty_action_tag_e = 19;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_INITIAL_SIZE: ghostty_action_tag_e = 20;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_CELL_SIZE: ghostty_action_tag_e = 21;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_INSPECTOR: ghostty_action_tag_e = 22;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_RENDER_INSPECTOR: ghostty_action_tag_e = 23;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_DESKTOP_NOTIFICATION: ghostty_action_tag_e = 24;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_SET_TITLE: ghostty_action_tag_e = 25;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_PWD: ghostty_action_tag_e = 26;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_MOUSE_SHAPE: ghostty_action_tag_e = 27;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_MOUSE_VISIBILITY: ghostty_action_tag_e = 28;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_MOUSE_OVER_LINK: ghostty_action_tag_e = 29;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_RENDERER_HEALTH: ghostty_action_tag_e = 30;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_OPEN_CONFIG: ghostty_action_tag_e = 31;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_QUIT_TIMER: ghostty_action_tag_e = 32;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_SECURE_INPUT: ghostty_action_tag_e = 33;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_KEY_SEQUENCE: ghostty_action_tag_e = 34;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_COLOR_CHANGE: ghostty_action_tag_e = 35;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_RELOAD_CONFIG: ghostty_action_tag_e = 36;
pub const ghostty_action_tag_e_GHOSTTY_ACTION_CONFIG_CHANGE: ghostty_action_tag_e = 37;
pub type ghostty_action_tag_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ghostty_action_u {
    pub new_split: ghostty_action_split_direction_e,
    pub toggle_fullscreen: ghostty_action_fullscreen_e,
    pub move_tab: ghostty_action_move_tab_s,
    pub goto_tab: ghostty_action_goto_tab_e,
    pub goto_split: ghostty_action_goto_split_e,
    pub resize_split: ghostty_action_resize_split_s,
    pub size_limit: ghostty_action_size_limit_s,
    pub initial_size: ghostty_action_initial_size_s,
    pub cell_size: ghostty_action_cell_size_s,
    pub inspector: ghostty_action_inspector_e,
    pub desktop_notification: ghostty_action_desktop_notification_s,
    pub set_title: ghostty_action_set_title_s,
    pub pwd: ghostty_action_pwd_s,
    pub mouse_shape: ghostty_action_mouse_shape_e,
    pub mouse_visibility: ghostty_action_mouse_visibility_e,
    pub mouse_over_link: ghostty_action_mouse_over_link_s,
    pub renderer_health: ghostty_action_renderer_health_e,
    pub quit_timer: ghostty_action_quit_timer_e,
    pub secure_input: ghostty_action_secure_input_e,
    pub key_sequence: ghostty_action_key_sequence_s,
    pub color_change: ghostty_action_color_change_s,
    pub reload_config: ghostty_action_reload_config_s,
    pub config_change: ghostty_action_config_change_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_u"][::std::mem::size_of::<ghostty_action_u>() - 16usize];
    ["Alignment of ghostty_action_u"][::std::mem::align_of::<ghostty_action_u>() - 8usize];
    ["Offset of field: ghostty_action_u::new_split"]
        [::std::mem::offset_of!(ghostty_action_u, new_split) - 0usize];
    ["Offset of field: ghostty_action_u::toggle_fullscreen"]
        [::std::mem::offset_of!(ghostty_action_u, toggle_fullscreen) - 0usize];
    ["Offset of field: ghostty_action_u::move_tab"]
        [::std::mem::offset_of!(ghostty_action_u, move_tab) - 0usize];
    ["Offset of field: ghostty_action_u::goto_tab"]
        [::std::mem::offset_of!(ghostty_action_u, goto_tab) - 0usize];
    ["Offset of field: ghostty_action_u::goto_split"]
        [::std::mem::offset_of!(ghostty_action_u, goto_split) - 0usize];
    ["Offset of field: ghostty_action_u::resize_split"]
        [::std::mem::offset_of!(ghostty_action_u, resize_split) - 0usize];
    ["Offset of field: ghostty_action_u::size_limit"]
        [::std::mem::offset_of!(ghostty_action_u, size_limit) - 0usize];
    ["Offset of field: ghostty_action_u::initial_size"]
        [::std::mem::offset_of!(ghostty_action_u, initial_size) - 0usize];
    ["Offset of field: ghostty_action_u::cell_size"]
        [::std::mem::offset_of!(ghostty_action_u, cell_size) - 0usize];
    ["Offset of field: ghostty_action_u::inspector"]
        [::std::mem::offset_of!(ghostty_action_u, inspector) - 0usize];
    ["Offset of field: ghostty_action_u::desktop_notification"]
        [::std::mem::offset_of!(ghostty_action_u, desktop_notification) - 0usize];
    ["Offset of field: ghostty_action_u::set_title"]
        [::std::mem::offset_of!(ghostty_action_u, set_title) - 0usize];
    ["Offset of field: ghostty_action_u::pwd"]
        [::std::mem::offset_of!(ghostty_action_u, pwd) - 0usize];
    ["Offset of field: ghostty_action_u::mouse_shape"]
        [::std::mem::offset_of!(ghostty_action_u, mouse_shape) - 0usize];
    ["Offset of field: ghostty_action_u::mouse_visibility"]
        [::std::mem::offset_of!(ghostty_action_u, mouse_visibility) - 0usize];
    ["Offset of field: ghostty_action_u::mouse_over_link"]
        [::std::mem::offset_of!(ghostty_action_u, mouse_over_link) - 0usize];
    ["Offset of field: ghostty_action_u::renderer_health"]
        [::std::mem::offset_of!(ghostty_action_u, renderer_health) - 0usize];
    ["Offset of field: ghostty_action_u::quit_timer"]
        [::std::mem::offset_of!(ghostty_action_u, quit_timer) - 0usize];
    ["Offset of field: ghostty_action_u::secure_input"]
        [::std::mem::offset_of!(ghostty_action_u, secure_input) - 0usize];
    ["Offset of field: ghostty_action_u::key_sequence"]
        [::std::mem::offset_of!(ghostty_action_u, key_sequence) - 0usize];
    ["Offset of field: ghostty_action_u::color_change"]
        [::std::mem::offset_of!(ghostty_action_u, color_change) - 0usize];
    ["Offset of field: ghostty_action_u::reload_config"]
        [::std::mem::offset_of!(ghostty_action_u, reload_config) - 0usize];
    ["Offset of field: ghostty_action_u::config_change"]
        [::std::mem::offset_of!(ghostty_action_u, config_change) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ghostty_action_s {
    pub tag: ghostty_action_tag_e,
    pub action: ghostty_action_u,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_action_s"][::std::mem::size_of::<ghostty_action_s>() - 24usize];
    ["Alignment of ghostty_action_s"][::std::mem::align_of::<ghostty_action_s>() - 8usize];
    ["Offset of field: ghostty_action_s::tag"]
        [::std::mem::offset_of!(ghostty_action_s, tag) - 0usize];
    ["Offset of field: ghostty_action_s::action"]
        [::std::mem::offset_of!(ghostty_action_s, action) - 8usize];
};
pub type ghostty_runtime_wakeup_cb =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type ghostty_runtime_read_clipboard_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ghostty_clipboard_e,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
pub type ghostty_runtime_confirm_read_clipboard_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ghostty_clipboard_request_e,
    ),
>;
pub type ghostty_runtime_write_clipboard_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_char,
        arg3: ghostty_clipboard_e,
        arg4: bool,
    ),
>;
pub type ghostty_runtime_close_surface_cb =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: bool)>;
pub type ghostty_runtime_action_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ghostty_app_t,
        arg2: ghostty_target_s,
        arg3: ghostty_action_s,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghostty_runtime_config_s {
    pub userdata: *mut ::std::os::raw::c_void,
    pub supports_selection_clipboard: bool,
    pub wakeup_cb: ghostty_runtime_wakeup_cb,
    pub action_cb: ghostty_runtime_action_cb,
    pub read_clipboard_cb: ghostty_runtime_read_clipboard_cb,
    pub confirm_read_clipboard_cb: ghostty_runtime_confirm_read_clipboard_cb,
    pub write_clipboard_cb: ghostty_runtime_write_clipboard_cb,
    pub close_surface_cb: ghostty_runtime_close_surface_cb,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ghostty_runtime_config_s"]
        [::std::mem::size_of::<ghostty_runtime_config_s>() - 64usize];
    ["Alignment of ghostty_runtime_config_s"]
        [::std::mem::align_of::<ghostty_runtime_config_s>() - 8usize];
    ["Offset of field: ghostty_runtime_config_s::userdata"]
        [::std::mem::offset_of!(ghostty_runtime_config_s, userdata) - 0usize];
    ["Offset of field: ghostty_runtime_config_s::supports_selection_clipboard"]
        [::std::mem::offset_of!(ghostty_runtime_config_s, supports_selection_clipboard) - 8usize];
    ["Offset of field: ghostty_runtime_config_s::wakeup_cb"]
        [::std::mem::offset_of!(ghostty_runtime_config_s, wakeup_cb) - 16usize];
    ["Offset of field: ghostty_runtime_config_s::action_cb"]
        [::std::mem::offset_of!(ghostty_runtime_config_s, action_cb) - 24usize];
    ["Offset of field: ghostty_runtime_config_s::read_clipboard_cb"]
        [::std::mem::offset_of!(ghostty_runtime_config_s, read_clipboard_cb) - 32usize];
    ["Offset of field: ghostty_runtime_config_s::confirm_read_clipboard_cb"]
        [::std::mem::offset_of!(ghostty_runtime_config_s, confirm_read_clipboard_cb) - 40usize];
    ["Offset of field: ghostty_runtime_config_s::write_clipboard_cb"]
        [::std::mem::offset_of!(ghostty_runtime_config_s, write_clipboard_cb) - 48usize];
    ["Offset of field: ghostty_runtime_config_s::close_surface_cb"]
        [::std::mem::offset_of!(ghostty_runtime_config_s, close_surface_cb) - 56usize];
};
unsafe extern "C" {
    pub fn ghostty_init() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ghostty_cli_main(arg1: usize, arg2: *mut *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn ghostty_info() -> ghostty_info_s;
}
unsafe extern "C" {
    pub fn ghostty_config_new() -> ghostty_config_t;
}
unsafe extern "C" {
    pub fn ghostty_config_free(arg1: ghostty_config_t);
}
unsafe extern "C" {
    pub fn ghostty_config_clone(arg1: ghostty_config_t) -> ghostty_config_t;
}
unsafe extern "C" {
    pub fn ghostty_config_load_cli_args(arg1: ghostty_config_t);
}
unsafe extern "C" {
    pub fn ghostty_config_load_default_files(arg1: ghostty_config_t);
}
unsafe extern "C" {
    pub fn ghostty_config_load_recursive_files(arg1: ghostty_config_t);
}
unsafe extern "C" {
    pub fn ghostty_config_finalize(arg1: ghostty_config_t);
}
unsafe extern "C" {
    pub fn ghostty_config_get(
        arg1: ghostty_config_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_char,
        arg4: usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ghostty_config_trigger(
        arg1: ghostty_config_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ghostty_input_trigger_s;
}
unsafe extern "C" {
    pub fn ghostty_config_diagnostics_count(arg1: ghostty_config_t) -> u32;
}
unsafe extern "C" {
    pub fn ghostty_config_get_diagnostic(arg1: ghostty_config_t, arg2: u32)
        -> ghostty_diagnostic_s;
}
unsafe extern "C" {
    pub fn ghostty_config_open();
}
unsafe extern "C" {
    pub fn ghostty_app_new(
        arg1: *const ghostty_runtime_config_s,
        arg2: ghostty_config_t,
    ) -> ghostty_app_t;
}
unsafe extern "C" {
    pub fn ghostty_app_free(arg1: ghostty_app_t);
}
unsafe extern "C" {
    pub fn ghostty_app_tick(arg1: ghostty_app_t);
}
unsafe extern "C" {
    pub fn ghostty_app_userdata(arg1: ghostty_app_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ghostty_app_set_focus(arg1: ghostty_app_t, arg2: bool);
}
unsafe extern "C" {
    pub fn ghostty_app_key(arg1: ghostty_app_t, arg2: ghostty_input_key_s) -> bool;
}
unsafe extern "C" {
    pub fn ghostty_app_key_is_binding(arg1: ghostty_app_t, arg2: ghostty_input_key_s) -> bool;
}
unsafe extern "C" {
    pub fn ghostty_app_keyboard_changed(arg1: ghostty_app_t);
}
unsafe extern "C" {
    pub fn ghostty_app_open_config(arg1: ghostty_app_t);
}
unsafe extern "C" {
    pub fn ghostty_app_update_config(arg1: ghostty_app_t, arg2: ghostty_config_t);
}
unsafe extern "C" {
    pub fn ghostty_app_needs_confirm_quit(arg1: ghostty_app_t) -> bool;
}
unsafe extern "C" {
    pub fn ghostty_app_has_global_keybinds(arg1: ghostty_app_t) -> bool;
}
unsafe extern "C" {
    pub fn ghostty_app_set_color_scheme(arg1: ghostty_app_t, arg2: ghostty_color_scheme_e);
}
unsafe extern "C" {
    pub fn ghostty_surface_config_new() -> ghostty_surface_config_s;
}
unsafe extern "C" {
    pub fn ghostty_surface_new(
        arg1: ghostty_app_t,
        arg2: *mut ghostty_surface_config_s,
    ) -> ghostty_surface_t;
}
unsafe extern "C" {
    pub fn ghostty_surface_free(arg1: ghostty_surface_t);
}
unsafe extern "C" {
    pub fn ghostty_surface_userdata(arg1: ghostty_surface_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ghostty_surface_app(arg1: ghostty_surface_t) -> ghostty_app_t;
}
unsafe extern "C" {
    pub fn ghostty_surface_inherited_config(arg1: ghostty_surface_t) -> ghostty_surface_config_s;
}
unsafe extern "C" {
    pub fn ghostty_surface_update_config(arg1: ghostty_surface_t, arg2: ghostty_config_t);
}
unsafe extern "C" {
    pub fn ghostty_surface_needs_confirm_quit(arg1: ghostty_surface_t) -> bool;
}
unsafe extern "C" {
    pub fn ghostty_surface_refresh(arg1: ghostty_surface_t);
}
unsafe extern "C" {
    pub fn ghostty_surface_draw(arg1: ghostty_surface_t);
}
unsafe extern "C" {
    pub fn ghostty_surface_set_content_scale(arg1: ghostty_surface_t, arg2: f64, arg3: f64);
}
unsafe extern "C" {
    pub fn ghostty_surface_set_focus(arg1: ghostty_surface_t, arg2: bool);
}
unsafe extern "C" {
    pub fn ghostty_surface_set_occlusion(arg1: ghostty_surface_t, arg2: bool);
}
unsafe extern "C" {
    pub fn ghostty_surface_set_size(arg1: ghostty_surface_t, arg2: u32, arg3: u32);
}
unsafe extern "C" {
    pub fn ghostty_surface_size(arg1: ghostty_surface_t) -> ghostty_surface_size_s;
}
unsafe extern "C" {
    pub fn ghostty_surface_set_color_scheme(arg1: ghostty_surface_t, arg2: ghostty_color_scheme_e);
}
unsafe extern "C" {
    pub fn ghostty_surface_key_translation_mods(
        arg1: ghostty_surface_t,
        arg2: ghostty_input_mods_e,
    ) -> ghostty_input_mods_e;
}
unsafe extern "C" {
    pub fn ghostty_surface_key(arg1: ghostty_surface_t, arg2: ghostty_input_key_s) -> bool;
}
unsafe extern "C" {
    pub fn ghostty_surface_key_is_binding(
        arg1: ghostty_surface_t,
        arg2: ghostty_input_key_s,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ghostty_surface_text(
        arg1: ghostty_surface_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    );
}
unsafe extern "C" {
    pub fn ghostty_surface_mouse_captured(arg1: ghostty_surface_t) -> bool;
}
unsafe extern "C" {
    pub fn ghostty_surface_mouse_button(
        arg1: ghostty_surface_t,
        arg2: ghostty_input_mouse_state_e,
        arg3: ghostty_input_mouse_button_e,
        arg4: ghostty_input_mods_e,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ghostty_surface_mouse_pos(
        arg1: ghostty_surface_t,
        arg2: f64,
        arg3: f64,
        arg4: ghostty_input_mods_e,
    );
}
unsafe extern "C" {
    pub fn ghostty_surface_mouse_scroll(
        arg1: ghostty_surface_t,
        arg2: f64,
        arg3: f64,
        arg4: ghostty_input_scroll_mods_t,
    );
}
unsafe extern "C" {
    pub fn ghostty_surface_mouse_pressure(arg1: ghostty_surface_t, arg2: u32, arg3: f64);
}
unsafe extern "C" {
    pub fn ghostty_surface_ime_point(arg1: ghostty_surface_t, arg2: *mut f64, arg3: *mut f64);
}
unsafe extern "C" {
    pub fn ghostty_surface_request_close(arg1: ghostty_surface_t);
}
unsafe extern "C" {
    pub fn ghostty_surface_split(arg1: ghostty_surface_t, arg2: ghostty_action_split_direction_e);
}
unsafe extern "C" {
    pub fn ghostty_surface_split_focus(arg1: ghostty_surface_t, arg2: ghostty_action_goto_split_e);
}
unsafe extern "C" {
    pub fn ghostty_surface_split_resize(
        arg1: ghostty_surface_t,
        arg2: ghostty_action_resize_split_direction_e,
        arg3: u16,
    );
}
unsafe extern "C" {
    pub fn ghostty_surface_split_equalize(arg1: ghostty_surface_t);
}
unsafe extern "C" {
    pub fn ghostty_surface_binding_action(
        arg1: ghostty_surface_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ghostty_surface_complete_clipboard_request(
        arg1: ghostty_surface_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: bool,
    );
}
unsafe extern "C" {
    pub fn ghostty_surface_has_selection(arg1: ghostty_surface_t) -> bool;
}
unsafe extern "C" {
    pub fn ghostty_surface_selection(
        arg1: ghostty_surface_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn ghostty_surface_inspector(arg1: ghostty_surface_t) -> ghostty_inspector_t;
}
unsafe extern "C" {
    pub fn ghostty_inspector_free(arg1: ghostty_surface_t);
}
unsafe extern "C" {
    pub fn ghostty_inspector_set_focus(arg1: ghostty_inspector_t, arg2: bool);
}
unsafe extern "C" {
    pub fn ghostty_inspector_set_content_scale(arg1: ghostty_inspector_t, arg2: f64, arg3: f64);
}
unsafe extern "C" {
    pub fn ghostty_inspector_set_size(arg1: ghostty_inspector_t, arg2: u32, arg3: u32);
}
unsafe extern "C" {
    pub fn ghostty_inspector_mouse_button(
        arg1: ghostty_inspector_t,
        arg2: ghostty_input_mouse_state_e,
        arg3: ghostty_input_mouse_button_e,
        arg4: ghostty_input_mods_e,
    );
}
unsafe extern "C" {
    pub fn ghostty_inspector_mouse_pos(arg1: ghostty_inspector_t, arg2: f64, arg3: f64);
}
unsafe extern "C" {
    pub fn ghostty_inspector_mouse_scroll(
        arg1: ghostty_inspector_t,
        arg2: f64,
        arg3: f64,
        arg4: ghostty_input_scroll_mods_t,
    );
}
unsafe extern "C" {
    pub fn ghostty_inspector_key(
        arg1: ghostty_inspector_t,
        arg2: ghostty_input_action_e,
        arg3: ghostty_input_key_e,
        arg4: ghostty_input_mods_e,
    );
}
unsafe extern "C" {
    pub fn ghostty_inspector_text(arg1: ghostty_inspector_t, arg2: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn ghostty_set_window_background_blur(
        arg1: ghostty_app_t,
        arg2: *mut ::std::os::raw::c_void,
    );
}
